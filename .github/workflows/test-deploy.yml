name: Test server deploy

on: 
  workflow_dispatch:
  pull_request:
    branches: [test-release]

jobs: 
  test_deploy: 
    name: Test server deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
      - name: checkout Github Action
        uses: actions/checkout@v3 

      - name : Create env file 
        run: |
          echo "${{ secrets.BE_APPLICATION_PROD }}" >> application-prod.yml
          echo "${{ secrets.BE_ENV_AUTH }}" >> auth.yml
          echo "${{ secrets.BE_ENV_DATASOURCE }}" >> datasource.yml
        working-directory: ./src/main/resources

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Spring Boot Build with Gradle
        run: ./gradlew clean build -Pprofile=prod
      
      - name: Build and Push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v5.6
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}
          tags: ${{ secrets.DOCKER_IMAGE_TAG }}
          registry: docker.io
          dockerfile: ./Dockerfile
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Deploy
        uses: appleboy/ssh-action@master
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          IMAGE_TAG: ${{ secrets.DOCKER_IMAGE_TAG }}
        with:
          host: ${{ secrets.BE_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.BE_SERVER_TOKEN }}
          envs: DOCKER_REGISTRY,DOCKER_REPOSITORY,IMAGE_TAG
          script: |
            sudo docker pull $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
            sudo docker stop back-test-server
            sudo docker run -d --rm --name back-test-server -p 8080:8080 $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .

